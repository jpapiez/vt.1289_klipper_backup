#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT
 LED_STANDBY

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'gcode_macro _MENU_LIMITS' is in printer %} _MENU_LIMITS INDEX=4 {% endif %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  {% if user.hw.runout.ena %} UPDATE_DELAYED_GCODE ID=DISABLEFILAMENTSENSOR DURATION=1 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto and not user.hw.mag_probe.ena %}
    {% set _dummy = text.append("[z_calibration] defined but no MagProbe\n") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_debug: False
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
  ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  ##### Endstops #####
  {% set user_debug = False %}
  {% set user_z_endstop_xy = [142.0,300.0] %}    # Z endstop position                  from safe_z_home/home_xy_position
  {% set user_z_endstop_hop = 10.0 %}            # Z hop for moves (e.g., homing)      from safe_z_home/z_hop
  {% set user_z_home_current = 0.3 %}            # Reduced homing current for z        from zellneralex setting
  {% set user_home_accel = 1200 %}               # Reduced ACCEL for homing            from zellneralex setting
  {% set user_bed_y_offset = 5 %}                # Endstop offset to bed max y         from zellneralex setting   --where is this used?

  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 30 %}            ; default retract/extrude speed
  {% set user_travel_speed = 500 %}            ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}      ; load/unload speed
  {% set user_wipe_speed = 90 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  

  ##### Mag Probe #####
  {% set user_probe_dock_pos = [0,305] %}      ; position of the dock 
  {% set user_probe_delta_x = 30 %}            ; x offset for position before dock
  {% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  {% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash

  ##### Park Position #####
  {% set user_park_xy_delta = 25 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]

  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 100 %}            ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 18 %}              ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 3 %}             ; retract/extrude distance while PAUSE or RESUME

  ##### Purge & Brush #####
  {% set user_bucket_left_width = 37.5 %}
  {% set user_bucket_right_width = 35 %}
  {% set user_bucket_gap = 25	%}
  {% set user_bucket_start = 190 %}
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  {% set user_brush_x_middle = 239 %}          ; mid point of brush at right profile
  {% set user_brush_x_width = 35 %}            ; width of brush
  {% set user_brush_y_start = 302 %}           ; start point at y
  {% set user_wipe_z = 2.0 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 5 %}                  ; number of full wipes
  {% set user_z_purge = 15 %}                  ; z above purge bucket

#  {% set calc_brush = {'start': user_brush_x_middle (232) - user_brush_x_width (40) / 2 == 212,
#                        'end'  : user_brush_x_middle (232) + user_brush_x_width (40) / 2} == 252 %}

  # {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
  #                      else max.x 300 - (max.x (300) - calc_brush.end (252)) / 2 == 276,
  #                      'y': max.y (305)} %}

#  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
#                                 else calc_brush.end (252)),
#                                 'y': user_brush_y_start (301)},
#                       'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
#                                 else calc_brush.start (212),
#                                 'y': max.y (305)}} %}

#  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
#                       'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
#                                  'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
#                                  'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
#                                  'cnt'    : user_wipe_cnt}} %}

  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 0 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]

  ##### Prime Line #####
  {% set user_prime_start_xy = [5.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment

  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 1 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 1 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 1 %}             ; Macro: _LAYER

  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {
    'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                    else False},
    'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                        else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                        else 'none'},
    'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                    else False},
    'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                    else False},
    'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                        else 'motion' if 'filament_motion_sensor motion' in printer.configfile.settings
                                        else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                        else 'none'},
    'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                       'output_pin heater_bed_relay' in printer.configfile.settings 
                                    else False},
    'auto_z_offset' : {
        'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                    else 'z_calib'   if 'z_calibration' in printer
                                    else 'flexplate' if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                    else 'none'},
    'mag_probe'     : {
        'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
                     else False},
    'endstop_temp'  : {
        'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                     else False}}%}
  {% set _dummy = hw_dic.chamber.update({
    'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({
    'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({
    'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({
    'sensor': True if hw_dic.runout.type == 'smart' or hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                   else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({
    'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({
    'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                    hw_dic.auto_z_offset.type == 'z_calib'
                 else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({
    'manu': True  if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                     hw_dic.auto_z_offset.type == 'flexplate'
                  else False}) %}
  # calc needed values
  {% set bed = {
    'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
    'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {
    'x': (bed.max.x - bed.min.x) / 2,
    'y': (bed.max.y - bed.min.y) / 2, 
    'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {
    'min': {'x': bed.min.x + user_park_xy_delta,
        'y': bed.min.y + user_park_xy_delta,
        'z': bed.min.z + user_park_z_min},
    'max': {'x': bed.max.x - user_park_xy_delta,
        'y': bed.max.y - user_park_xy_delta,
        'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                                       else user_z_endstop_hop %}
  {% set calc_brush = {
    'start' : user_brush_x_middle - user_brush_x_width / 2,
    'end'   : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {
    'x' : (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                                         else max.x - (max.x - calc_brush.end) / 2,
    'y' : max.y} %}
  {% set calc_wipe = {
    'start' : {
        'x' : calc_brush.start if user_brush_pos|lower == 'left' else calc_brush.end,
        'y' : user_brush_y_start},
    'end'   : {
        'x' : calc_brush.end if user_brush_pos|lower == 'left' else calc_brush.start,
        'y' : max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {
    'z_endstop' : {
        'x'   : user_z_endstop_xy[0],
        'y'   : user_z_endstop_xy[1],
        'z'   : calc_z_endstop_z, 
        'hop' : user_z_endstop_hop},
    'z_current' : user_z_home_current,
    'accel'     : user_home_accel} %}
  {% set purge_dic = {
    'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
    'wipe'  : {
        'start'   : { 'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
        'end'     : { 'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
        'offset'  : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
        'cnt'     : user_wipe_cnt}} %}
  {% set probe_dic = {
    'dock'  : {
        'x' : user_probe_dock_pos[0], 
        'y' : user_probe_dock_pos[1] + user_probe_delta_y},
    'store' : {
        'x' : user_probe_dock_pos[0] + user_probe_delta_x, 
        'y' : user_probe_dock_pos[1]}} %}
  {% set speed_dic = {
    'z_hop'   : (user_z_hop_speed * 60),
    'retract' : (user_retract_speed * 60),
    'travel'  : (user_travel_speed * 60), 
    'dock'    : (user_probe_dock_speed * 60),
    'load'    : (user_filament_load_speed * 60),
    'wipe'    : (user_wipe_speed * 60),
    'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {
    'bed'             : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
    'center'          : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
    'front'           : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
    'frontlow'        : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
    'rear'            : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
    'pause'           : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
    'park_at_cancel'  : user_park_at_cancel} %}
  {% set filament_dic = {
    'load_distance'   : user_load_distance,
    'load_extrude'    : user_load_extrude,
    'unload_distance' : user_unload_distance,
    'retract'         : {
        'end'     : user_retract_end,
        'pause'   : user_retract_pause,
        'cancel'  : user_retract_end - user_retract_pause}} %}
  {% set prime_dic = { 
    'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
    'dir'             : user_prime_dir,
    'spacing'         : user_prime_spacing,
    'length_per_seg'  : user_prime_lenght / user_prime_seg,
    'seg'             : user_prime_seg,
    'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic =  { 
    'bed_up'      : user_print_start_bed_up|float|round(1),
    'ival'        : user_print_start_ival|int,
    'time'        : { 
        'extruder'  : (user_print_start_extruder_time * 60)|int,
        'bed'       : (user_print_start_bed_time * 60)|int },
    'prime_mult'  : user_print_start_prime_mult|float } %}
  {% set respond_dic = {
    'z_current'     : user_respond_set_z_current, 
    'acc'           : user_respond_set_acc, 
    'probe_action'  : user_respond_probe_action, 
    'layer'         : user_respond_layer} %}
  {% set peripheral_dic = {
    'filter'    : {
        'on_val'          : user_filter_on,
        'warning'         : user_filter_use_time,
        'run_after_print' : (user_fan_run_after_print * 60)},
    'vent'      : { 
        'on_val'          : user_vent_on,
        'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
    'caselight' : {
        'on_val'          : user_caselight_on}} %}

  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=debug VALUE="{user_debug}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True
